buildscript {
    repositories {
        jcenter()
    }
 
    dependencies {
    	classpath 'com.bmuschko:gradle-cargo-plugin:2.7.0'
    	classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
    }
}

def def_project= [
	context : '/vsql'
]


apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.bmuschko.tomcat-base'

dependencies {
 	def cargoVersion = '1.7.9'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
          "org.codehaus.cargo:cargo-licensed-dtds:$cargoVersion",
          "org.codehaus.cargo:cargo-ant:$cargoVersion"
          
	def tomcatVersion = '8.5.50'
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
	tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
	    exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
}

cargo {
	def $tomcatVersion = "apache-tomcat-8.5.50"
    containerId = 'tomcat8x'
    port = 18080

    deployable {
        context = def_project.context
    }

    local {
    /*
    	installer {
	        installUrl = "http://us.mirrors.quenda.co/apache/tomcat/tomcat-8/v8.5.50/bin/"+$tomcatVersion+".zip"
	        downloadDir = file("build/download") // install download directory
	        extractDir = file("build/extract") // download file 설치 디렉토리           
	    }
        homeDir= file("build/extract/server/") // 홈디렉토리.
    	outputFile = new File('logs/tomcat/server.log')       
      
*/      
		startStopTimeout = 60000
		homeDir= file("C:/00.newsource/tomcatserver/apache-tomcat-8.5.50")
        containerProperties {
            property 'cargo.tomcat.ajp.port', 19099
        }
        
        systemProperties {
            property 'varsql.runtime', 'local'
            property 'com.varsql.install.root', 'C:/01.util/varsql-webappv.0.0.1/resources'
        }
    }
}

task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}

eclipse { // 이클립스 project facets설정.
	project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	
	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig
	
	// 자동 빌드
	autoBuildTasks generateCode
	
    wtp {
    	component {
            contextPath = def_project.context // context path 지정
        }
        facet {
            facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: '1.8'
        }
    }
    
    classpath {
        defaultOutputDir = file("target")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}
