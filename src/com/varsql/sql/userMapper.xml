<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="userMapper">
	
	<!-- 사용자 정보 상세 보기. -->
	<select id="userMapper.selectUserDetail" parameterType="string" resultType="dataCommonVO">
		select * 
		from VTUSER 
		where viewid =#{viewid}
	</select>
	
	<!-- id check -->
	<select id="userMapper.selectIdCheck" parameterType="string" resultType="int">
		select count(1)as CNT 
		from VTUSER
		where uid =#{uid} 
	</select>
	
	<!-- 사용자 view id max val -->
	<select id="userMapper.selectUserMaxVal" resultType="java.lang.String">
		select max(viewid)as maxval from VTUSER 
	</select>
	
	<!-- 회원 가입. -->
	<insert id="userMapper.insertUserInfo" parameterType="joinForm">
		insert  into VTUSER (
			VIEWID 
			, UID 
			, UPW 
			, UNAME 
			, ORG_NM 
			, DEPT_NM 
			, UEMAIL 
			, USER_ROLE 
			, DESCRIPTION 
			, ACCEPT_YN
			, REG_ID 
			, REG_DT
			, UPD_ID
			, UPD_DT
		) 
		values(
			#{viewid}
			, #{uid}
			, #{upw}
			, #{uname}
			, #{orgNm}
			, #{deptNm}
			, #{uemail}
			, 'GUEST'
			, #{description}
			, #{acceptYn}
			, #{creId}
			, CURRENT TIMESTAMP
			, #{creId}
			, CURRENT TIMESTAMP
		) 
	</insert>
	
	<!-- 사용자 정보 업데이트 -->
	<update id="userMapper.updateUserInfo" parameterType="userForm">
		update VTUSER 
		set 
			 UNAME =#{uname}
			, ORG_NM =#{orgNm}
			, DEPT_NM =#{deptNm}
			, UEMAIL =#{uemail}
			, DESCRIPTION =#{description}
			, UPD_DT = CURRENT TIMESTAMP
		where VIEWID =#{viewid}
	</update>
	
	<!-- current password check -->
	<select id="userMapper.selectUserPasswordCheck" parameterType="passwordForm" resultType="string">
		select UPW
		from VTUSER a
		where VIEWID =#{viewid}
	</select>
	
	<!-- 패스워드 변경. -->
	<update id="userMapper.updatePasswordInfo" parameterType="passwordForm">
		update VTUSER 
		set 
			 UPW = #{upw}
		where VIEWID =#{viewid}
	</update>
	
	<!-- qna 총 수 -->
	<select id="userMapper.selectQnaTotalCnt" parameterType="java.util.Map" resultType="int">
		select count(1) as totalcnt
		from VTQNA a
		where REG_ID =#{uid}
		and DEL_YN !='Y'
		and (TITLE like '%'||#{searchVal}||'%' or QUESTION like '%'||#{searchVal}||'%') 
	</select>
	
	<!-- qna 목록보기 -->
	<select id="userMapper.selectQna" parameterType="java.util.Map" resultType="dataCommonVO">
		select a.*, a.REG_DT as CHAR_CRE_DT , a.UPD_DT as CHAR_UPD_DT 
		from VTQNA a
		where REG_ID =#{uid}
		and DEL_YN !='Y'
		and (TITLE like '%'||#{searchVal}||'%' or QUESTION like '%'||#{searchVal}||'%') 
		order by QNAID desc OFFSET ${first}-1 ROWS FETCH FIRST ${rows} ROWS ONLY
	</select>
	
	<!-- qna 상세보기 -->
	<select id="userMapper.selectDetailQna" parameterType="java.util.Map" resultType="dataCommonVO">
		select a.*, a.REG_DT as CHAR_CRE_DT 
		from VTQNA a
		where DEL_YN !='Y'
		and QNAID=#{qnaid}
	</select>
	
	<!-- qna 상세보기 -->
	<select id="userMapper.selectQnaMaxVal" parameterType="java.util.Map" resultType="java.lang.String">
		select max(QNAID)as MAXVAL from VTQNA
	</select>
	
	<insert id="userMapper.insertQnaInfo" parameterType="java.util.Map">
		insert  into VTQNA (
			QNAID 
			, TITLE 
			, QUESTION 
			, REG_ID 
			, REG_DT 
			, DEL_YN
			, ANSWER
		)
		values(
			#{qnaid}
			, #{title}
			, #{question}
			, #{cre_id}
			, CURRENT TIMESTAMP
			, 'N'
			, ''
		)
	</insert>
	
	<update id="userMapper.updateQnaInfo" parameterType="java.util.Map">
		update VTQNA
		set
			TITLE =#{title}
			,QUESTION =#{question}
		where QNAID=#{qnaid}
	</update>
	
	<update id="userMapper.deleteQnaInfo" parameterType="java.util.Map">
		update VTQNA 
		set
			DEL_YN ='Y'
		where QNAID=#{qnaid}
	</update>
	
	<select id="userMapper.selectUserDbUseList" parameterType="java.util.Map" resultType="java.util.Map">
		select  VCONNID, VTYPE, VNAME
		from VTCONNECTION a
		where a.USE_YN = 'Y'
		and 
		<choose>
			<when test="role=='ADMIN'">
				1=1
			</when>
			<when test="role=='MANAGER'">
				a.VCONNID in (select VCONNID from VTDATABASE_ROLE where VIEWID = #{uid} and ROLE_TYPE='U')
			</when>
			<when test="role=='USER'">
				a.VCONNID in (select vconnid from VTDATABASE_ROLE where VIEWID = #{uid} and ROLE_TYPE='U' )
			</when>
	    	<otherwise>
	      		1!=1
	    	</otherwise>
	  	</choose>
	</select>
	
	<!-- 사용자 조회  -->
	<select id="userMapper.selectSearchUserList" parameterType="map" resultType="map">
		select VIEWID,UID,UNAME
		from VTUSER
		WHERE ACCEPT_YN ='Y'
		and USER_ROLE not in ('ADMIN')
		and UID like '%'||#{searchVal}||'%' 
	</select>
	
	<!-- 신규 메시지 조회  -->
	<select id="userMapper.selectMessageInfo" parameterType="map" resultType="map">
		select c.* , d.UNAME as SEND_NM , d.UID  as SEND_ID
		from (
			select a.MEMO_TITLE , a.MEMO_ID, a.MEMO_CONT, SEND_ID, to_char(REG_DT,'YYYY-MM-DD HH24:MI:SS') as REG_DT , VIEW_DT
			from VTMEMO a , VTMEMO_USER b 
			where a.MEMO_ID = b.MEMO_ID 
			and RECV_ID = #{uid}
			and VIEW_DT is null
			order by reg_dt desc
		) c left outer join VTUSER d 
		where c.SEND_ID  = d.VIEWID
	</select>
	
	<!-- 사용자 메시지  목록 수-->
	<select id="userMapper.selectUserMsgTotalcnt" parameterType="searchParameter" resultType="int">
		select count(1) CNT
		from VTMEMO a
		<choose>
			<when test="customParam.message_type == 'send'">
				where REG_ID = #{customParam.uid}
			</when>
			<otherwise>
				, VTMEMO_USER b 
				where a.MEMO_ID = b.MEMO_ID 
				and RECV_ID = #{customParam.uid}
			</otherwise>
		</choose>
		and MEMO_TITLE like '%'||#{keyword}||'%'
	</select>
	
	
	<resultMap id="sendMsgInfoMap" type="hashmap">
	    <id property="MEMO_ID" column="MEMO_ID" />
	    <result property="MEMO_TITLE" column="MEMO_TITLE"/>
	    <result property="MEMO_CONT" column="MEMO_CONT"/>
	    <result property="REG_DT" column="REG_DT"/>
	    <collection property="RECV_USER" javaType="java.util.ArrayList" resultMap="recvUserListMap"/>
	</resultMap>
	
	<resultMap id="recvUserListMap" type="hashmap">
	    <id property="UID" column="UID"/>
	    <result property="RECV_NM" column="RECV_NM"/>
	</resultMap>

	
	<!-- 사용자 메시지  send 목록 -->
	<select id="userMapper.selectUserSendMsg" parameterType="searchParameter" resultMap="sendMsgInfoMap">
		select c.* , d.UNAME as RECV_NM , d.UID
		from (
			select a.MEMO_ID
			  ,a.MEMO_TITLE
			  ,a.MEMO_CONT
			  ,to_char(a.REG_DT,'YYYY-MM-DD HH24:MI:SS') as REG_DT 
			  , b.RECV_ID
			from  VTMEMO a left outer join VTMEMO_USER b
			on a.MEMO_ID = b.MEMO_ID
			where REG_ID = #{customParam.uid}
			and DEL_YN = 'N'
			and MEMO_TITLE like '%'||#{keyword}||'%' 
			order by reg_dt desc OFFSET ${first}-1 ROWS FETCH FIRST ${last} ROWS ONLY
		) c left outer join VTUSER d 
		where c.RECV_ID  = d.VIEWID
	</select>
	
	<!-- 사용자 메시지  recv 목록. -->
	<select id="userMapper.selectUserRecvMsg" parameterType="searchParameter" resultType="map">
		select c.* , d.UNAME as SEND_NM , d.UID  as VIEW_ID
		from (
			select a.MEMO_TITLE , a.MEMO_ID, a.MEMO_CONT , SEND_ID 
			, to_char(REG_DT,'YYYY-MM-DD HH24:MI:SS') as REG_DT  , VIEW_DT
			from VTMEMO a , VTMEMO_USER b 
			where a.MEMO_ID = b.MEMO_ID 
			and RECV_ID = #{customParam.uid}
			and MEMO_TITLE like '%'||#{keyword}||'%' 
			order by reg_dt desc OFFSET ${first}-1 ROWS FETCH FIRST ${last} ROWS ONLY
		) c left outer join VTUSER d 
		where c.SEND_ID  = d.VIEWID
	</select>
	
	<!-- 메시지 삭제 -->
	<update id="userMapper.deleteMsgInfo" parameterType="map" >
		update VTMEMO
		set
			DEL_YN = 'Y'
		where MEMO_ID = #{memoId}
	</update>
	
	<!-- 메시지 사용자 삭제. -->
	<delete id="userMapper.deleteMsgUser" parameterType="map" >
		delete from VTMEMO_USER 
		where 1=1
		<choose>
			<when test="message_type == 'send'">
				and SEND_ID = (select REG_ID from VTMEMO WHERE MEMO_ID =#{memoId})
				and VIEW_DT is null
			</when>
			<otherwise>
				and RECV_ID = #{uid}
			</otherwise>
		</choose>
		and MEMO_ID =#{memoId}
	</delete>
	
	<!-- 메시지 정보 보내기  -->
	<insert id="userMapper.insertSendSqlInfo" parameterType="java.util.Map">
		insert  into VTMEMO (
			MEMO_ID
			, MEMO_TITLE
			, MEMO_CONT
			, REG_ID
			, REG_DT
		) 
		values(
			#{memo_id}
			, #{memo_title}
			, #{memo_cont}
			, #{uid}
			, CURRENT TIMESTAMP
		)
	</insert>
	
	<!-- 메시지 보낸 사람과 받는 사람 등록. -->
	<insert id="userMapper.insertSendUserInfo" parameterType="java.util.Map">
		insert  into VTMEMO_USER (
			MEMO_ID
			,SEND_ID
			,RECV_ID
		) 
		values(
			#{memo_id}
			, #{uid}
			, #{recv_id}
		)
	</insert>
	
	<!-- 메시지 확인 날짜 업데이트-->
	<update id="userMapper.updateMemoViewDate" parameterType="map">
		update VTMEMO_USER 
		set 
			VIEW_DT = CURRENT TIMESTAMP
		where RECV_ID = #{uid}
		and MEMO_ID = #{memo_id}
	</update>
	
	
</mapper>
